plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "${project.archives_base_name}-${project.minecraft_version}"
version = project.mod_version
group = project.maven_group

repositories {
    maven { url "maven.fabric" } // Fabric
    maven { url "https://maven.shedaniel.me/" } // REI, Cloth Config
    maven { url = "https://server.bbkr.space/artifactory/libs-release" } // UniversalComponents, LibGui
    maven { url "https://maven.terraformersmc.com/releases" } // ModMenu
    maven { // Curse, Expanded Storage
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // CardinalComponents (UniversalComponents lib)
        name = "Ladysnake Libs"
        url = "https://dl.bintray.com/ladysnake/libs"
    }
    maven { // WhereIsIt
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/jackfred2/WhereIsIt")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi "me.shedaniel:RoughlyEnoughItems:${project.rei_version}"
    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

    // Hotkey detection
    modImplementation include("red.jackf:whereisit:${project.whereisit_version}")

    // Config
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // Client GUIs
    modImplementation include("io.github.cottonmc:LibGui:${project.libgui_version}")

    implementation 'org.jetbrains:annotations:16.0.2'

    // Compat

    modCompileOnly "io.github.cottonmc:UniversalComponents:${project.universal_components_version}"
    modCompileOnly "curse.maven:expanded-storage-317856:${project.expanded_storage_file_id}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

curseforge {
    apiKey = project.findProperty("cf.key")
    project {
        id = "397217"
        changelog = "Check the GitHub for changes: https://github.com/JackFred2/ChestTracker"
        releaseType = "release"

        addGameVersion "Fabric"
        addGameVersion "Java 8"

        addGameVersion "1.16.2"
        addGameVersion "1.16.3"
        addGameVersion "1.16.4"
        addGameVersion "1.16.5"

        mainArtifact(remapJar) {
            relations {
                requiredDependency("fabric-api")
                optionalDependency("modmenu")
                optionalDependency("roughly-enough-items")
                embeddedLibrary("cloth-config")
                embeddedLibrary("cloth-api")
                embeddedLibrary("libgui")
                embeddedLibrary("where-is-it")
            }
            displayName = "${project.prefix} ${archivesBaseName}-${version}.jar"
        }

    }

    options {
        forgeGradleIntegration = false
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        mavenLocal()
    }
}
